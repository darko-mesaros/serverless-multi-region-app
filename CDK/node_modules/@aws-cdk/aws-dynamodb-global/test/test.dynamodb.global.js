"use strict";
const assert_1 = require("@aws-cdk/assert");
const aws_dynamodb_1 = require("@aws-cdk/aws-dynamodb");
const aws_dynamodb_2 = require("@aws-cdk/aws-dynamodb");
const core_1 = require("@aws-cdk/core");
const assert = require("assert");
const lib_1 = require("../lib");
// tslint:disable:object-literal-key-quotes
// CDK parameters
const CONSTRUCT_NAME = 'aws-cdk-dynamodb-global';
// DynamoDB table parameters
const TABLE_NAME = 'GlobalTable';
const TABLE_PARTITION_KEY = { name: 'hashKey', type: aws_dynamodb_1.AttributeType.STRING };
const STACK_PROPS = {
    partitionKey: TABLE_PARTITION_KEY,
    tableName: TABLE_NAME,
    regions: ['us-east-1', 'us-east-2', 'us-west-2']
};
module.exports = {
    'Default Global DynamoDB stack': {
        'global dynamo'(test) {
            const stack = new core_1.Stack();
            new lib_1.GlobalTable(stack, CONSTRUCT_NAME, STACK_PROPS);
            const topStack = stack.node.findChild(CONSTRUCT_NAME);
            for (const reg of STACK_PROPS.regions) {
                const tableStack = topStack.node.findChild(CONSTRUCT_NAME + '-' + reg);
                assert_1.expect(tableStack).to(assert_1.haveResource('AWS::DynamoDB::Table', {
                    "KeySchema": [
                        {
                            "AttributeName": "hashKey",
                            "KeyType": "HASH"
                        }
                    ],
                    "AttributeDefinitions": [
                        {
                            "AttributeName": "hashKey",
                            "AttributeType": "S"
                        }
                    ],
                    "StreamSpecification": {
                        "StreamViewType": "NEW_AND_OLD_IMAGES"
                    },
                    "TableName": "GlobalTable"
                }));
            }
            const customResourceStack = stack.node.findChild(CONSTRUCT_NAME + "-CustomResource");
            assert_1.expect(customResourceStack).to(assert_1.haveResource('AWS::Lambda::Function', {
                Description: "Lambda to make DynamoDB a global table",
                Handler: "index.handler",
                Timeout: 300
            }));
            assert_1.expect(customResourceStack).to(assert_1.haveResource('AWS::CloudFormation::CustomResource', {
                Regions: STACK_PROPS.regions,
                ResourceType: "Custom::DynamoGlobalTableCoordinator",
                TableName: TABLE_NAME,
            }));
            test.done();
        },
    },
    'Enforce StreamSpecification': {
        'global dynamo should only allow NEW_AND_OLD_IMAGES'(test) {
            const stack = new core_1.Stack();
            try {
                new lib_1.GlobalTable(stack, CONSTRUCT_NAME, {
                    tableName: TABLE_NAME,
                    stream: aws_dynamodb_1.StreamViewType.KEYS_ONLY,
                    partitionKey: TABLE_PARTITION_KEY,
                    regions: ['us-east-1', 'us-east-2', 'us-west-2']
                });
                // We are expecting the above line to throw a TypeError since
                // the streamSpecification is wrong.  Force a failure on this
                // line if we get there.
                assert_1.expect(stack).to(assert_1.haveResource('Fail::this::test::IfWeGetThisFar', {}));
            }
            catch (TypeError) {
                assert_1.expect(stack);
            }
            test.done();
        },
    },
    'Check getting tables': {
        'global dynamo should only allow NEW_AND_OLD_IMAGES'(test) {
            const stack = new core_1.Stack();
            const regTables = new lib_1.GlobalTable(stack, CONSTRUCT_NAME, {
                tableName: TABLE_NAME,
                partitionKey: TABLE_PARTITION_KEY,
                regions: ['us-east-1', 'us-east-2', 'us-west-2']
            });
            assert(regTables.regionalTables.length === 3);
            for (const table of regTables.regionalTables) {
                assert(table instanceof aws_dynamodb_2.Table);
            }
            test.done();
        },
    }
};
//# sourceMappingURL=data:application/json;base64,