"use strict";
const assert_1 = require("@aws-cdk/assert");
const lambda = require("@aws-cdk/aws-lambda");
const s3 = require("@aws-cdk/aws-s3");
const cdk = require("@aws-cdk/core");
const lib_1 = require("../lib");
module.exports = {
    'distribution with custom origin adds custom origin'(test) {
        const stack = new cdk.Stack();
        new lib_1.CloudFrontWebDistribution(stack, 'AnAmazingWebsiteProbably', {
            originConfigs: [
                {
                    originHeaders: {
                        "X-Custom-Header": "somevalue",
                    },
                    customOriginSource: {
                        domainName: "myorigin.com",
                    },
                    behaviors: [
                        {
                            isDefaultBehavior: true,
                        }
                    ],
                }
            ]
        });
        assert_1.expect(stack).toMatch({
            "Resources": {
                "AnAmazingWebsiteProbablyCFDistribution47E3983B": {
                    "Type": "AWS::CloudFront::Distribution",
                    "Properties": {
                        "DistributionConfig": {
                            "DefaultCacheBehavior": {
                                "AllowedMethods": [
                                    "GET",
                                    "HEAD"
                                ],
                                "CachedMethods": [
                                    "GET",
                                    "HEAD"
                                ],
                                "ForwardedValues": {
                                    "Cookies": {
                                        "Forward": "none"
                                    },
                                    "QueryString": false
                                },
                                "TargetOriginId": "origin1",
                                "ViewerProtocolPolicy": "redirect-to-https",
                                "Compress": true
                            },
                            "DefaultRootObject": "index.html",
                            "Enabled": true,
                            "HttpVersion": "http2",
                            "IPV6Enabled": true,
                            "Origins": [
                                {
                                    "CustomOriginConfig": {
                                        "HTTPPort": 80,
                                        "HTTPSPort": 443,
                                        "OriginKeepaliveTimeout": 5,
                                        "OriginProtocolPolicy": "https-only",
                                        "OriginReadTimeout": 30,
                                        "OriginSSLProtocols": [
                                            "TLSv1.2"
                                        ]
                                    },
                                    "DomainName": "myorigin.com",
                                    "Id": "origin1",
                                    "OriginCustomHeaders": [
                                        {
                                            "HeaderName": "X-Custom-Header",
                                            "HeaderValue": "somevalue"
                                        }
                                    ]
                                }
                            ],
                            "PriceClass": "PriceClass_100",
                            "ViewerCertificate": {
                                "CloudFrontDefaultCertificate": true
                            }
                        }
                    }
                }
            }
        });
        test.done();
    },
    'most basic distribution'(test) {
        const stack = new cdk.Stack();
        const sourceBucket = new s3.Bucket(stack, 'Bucket');
        new lib_1.CloudFrontWebDistribution(stack, 'AnAmazingWebsiteProbably', {
            originConfigs: [
                {
                    s3OriginSource: {
                        s3BucketSource: sourceBucket
                    },
                    behaviors: [
                        {
                            isDefaultBehavior: true,
                        }
                    ]
                }
            ]
        });
        assert_1.expect(stack).toMatch({
            "Resources": {
                "Bucket83908E77": {
                    "Type": "AWS::S3::Bucket",
                    "DeletionPolicy": "Retain",
                    "UpdateReplacePolicy": "Retain",
                },
                "AnAmazingWebsiteProbablyCFDistribution47E3983B": {
                    "Type": "AWS::CloudFront::Distribution",
                    "Properties": {
                        "DistributionConfig": {
                            "DefaultRootObject": "index.html",
                            "Origins": [
                                {
                                    "DomainName": {
                                        "Fn::GetAtt": [
                                            "Bucket83908E77",
                                            "RegionalDomainName"
                                        ]
                                    },
                                    "Id": "origin1",
                                    "S3OriginConfig": {}
                                }
                            ],
                            "ViewerCertificate": {
                                "CloudFrontDefaultCertificate": true
                            },
                            "PriceClass": "PriceClass_100",
                            "DefaultCacheBehavior": {
                                "AllowedMethods": [
                                    "GET",
                                    "HEAD"
                                ],
                                "CachedMethods": [
                                    "GET",
                                    "HEAD"
                                ],
                                "TargetOriginId": "origin1",
                                "ViewerProtocolPolicy": "redirect-to-https",
                                "ForwardedValues": {
                                    "QueryString": false,
                                    "Cookies": { "Forward": "none" }
                                },
                                "Compress": true
                            },
                            "Enabled": true,
                            "IPV6Enabled": true,
                            "HttpVersion": "http2"
                        }
                    }
                }
            }
        });
        test.done();
    },
    'distribution with trusted signers on default distribution'(test) {
        const stack = new cdk.Stack();
        const sourceBucket = new s3.Bucket(stack, 'Bucket');
        new lib_1.CloudFrontWebDistribution(stack, 'AnAmazingWebsiteProbably', {
            originConfigs: [
                {
                    s3OriginSource: {
                        s3BucketSource: sourceBucket
                    },
                    behaviors: [
                        {
                            isDefaultBehavior: true,
                            trustedSigners: ["1234"],
                        },
                    ]
                }
            ]
        });
        assert_1.expect(stack).toMatch({
            "Resources": {
                "Bucket83908E77": {
                    "Type": "AWS::S3::Bucket",
                    "DeletionPolicy": "Retain",
                    "UpdateReplacePolicy": "Retain",
                },
                "AnAmazingWebsiteProbablyCFDistribution47E3983B": {
                    "Type": "AWS::CloudFront::Distribution",
                    "Properties": {
                        "DistributionConfig": {
                            "DefaultRootObject": "index.html",
                            "Origins": [
                                {
                                    "DomainName": {
                                        "Fn::GetAtt": [
                                            "Bucket83908E77",
                                            "RegionalDomainName"
                                        ]
                                    },
                                    "Id": "origin1",
                                    "S3OriginConfig": {}
                                }
                            ],
                            "ViewerCertificate": {
                                "CloudFrontDefaultCertificate": true
                            },
                            "PriceClass": "PriceClass_100",
                            "DefaultCacheBehavior": {
                                "AllowedMethods": [
                                    "GET",
                                    "HEAD"
                                ],
                                "CachedMethods": [
                                    "GET",
                                    "HEAD"
                                ],
                                "TargetOriginId": "origin1",
                                "ViewerProtocolPolicy": "redirect-to-https",
                                "ForwardedValues": {
                                    "QueryString": false,
                                    "Cookies": { "Forward": "none" }
                                },
                                "TrustedSigners": [
                                    "1234"
                                ],
                                "Compress": true
                            },
                            "Enabled": true,
                            "IPV6Enabled": true,
                            "HttpVersion": "http2"
                        }
                    }
                }
            }
        });
        test.done();
    },
    'distribution with ViewerProtocolPolicy set to a non-default value'(test) {
        const stack = new cdk.Stack();
        const sourceBucket = new s3.Bucket(stack, 'Bucket');
        new lib_1.CloudFrontWebDistribution(stack, 'AnAmazingWebsiteProbably', {
            viewerProtocolPolicy: lib_1.ViewerProtocolPolicy.ALLOW_ALL,
            originConfigs: [
                {
                    s3OriginSource: {
                        s3BucketSource: sourceBucket
                    },
                    behaviors: [
                        {
                            isDefaultBehavior: true,
                        }
                    ]
                }
            ]
        });
        assert_1.expect(stack).toMatch({
            "Resources": {
                "Bucket83908E77": {
                    "Type": "AWS::S3::Bucket",
                    "DeletionPolicy": "Retain",
                    "UpdateReplacePolicy": "Retain",
                },
                "AnAmazingWebsiteProbablyCFDistribution47E3983B": {
                    "Type": "AWS::CloudFront::Distribution",
                    "Properties": {
                        "DistributionConfig": {
                            "DefaultRootObject": "index.html",
                            "Origins": [
                                {
                                    "DomainName": {
                                        "Fn::GetAtt": [
                                            "Bucket83908E77",
                                            "RegionalDomainName"
                                        ]
                                    },
                                    "Id": "origin1",
                                    "S3OriginConfig": {}
                                }
                            ],
                            "ViewerCertificate": {
                                "CloudFrontDefaultCertificate": true
                            },
                            "PriceClass": "PriceClass_100",
                            "DefaultCacheBehavior": {
                                "AllowedMethods": [
                                    "GET",
                                    "HEAD"
                                ],
                                "CachedMethods": [
                                    "GET",
                                    "HEAD"
                                ],
                                "TargetOriginId": "origin1",
                                "ViewerProtocolPolicy": "allow-all",
                                "ForwardedValues": {
                                    "QueryString": false,
                                    "Cookies": { "Forward": "none" }
                                },
                                "Compress": true
                            },
                            "Enabled": true,
                            "IPV6Enabled": true,
                            "HttpVersion": "http2",
                        }
                    }
                }
            }
        });
        test.done();
    },
    'distribution with disabled compression'(test) {
        const stack = new cdk.Stack();
        const sourceBucket = new s3.Bucket(stack, 'Bucket');
        new lib_1.CloudFrontWebDistribution(stack, 'AnAmazingWebsiteProbably', {
            originConfigs: [
                {
                    s3OriginSource: {
                        s3BucketSource: sourceBucket
                    },
                    behaviors: [
                        {
                            isDefaultBehavior: true,
                            compress: false
                        }
                    ]
                }
            ]
        });
        assert_1.expect(stack).toMatch({
            "Resources": {
                "Bucket83908E77": {
                    "Type": "AWS::S3::Bucket",
                    "DeletionPolicy": "Retain",
                    "UpdateReplacePolicy": "Retain",
                },
                "AnAmazingWebsiteProbablyCFDistribution47E3983B": {
                    "Type": "AWS::CloudFront::Distribution",
                    "Properties": {
                        "DistributionConfig": {
                            "DefaultRootObject": "index.html",
                            "Origins": [
                                {
                                    "DomainName": {
                                        "Fn::GetAtt": [
                                            "Bucket83908E77",
                                            "RegionalDomainName"
                                        ]
                                    },
                                    "Id": "origin1",
                                    "S3OriginConfig": {}
                                }
                            ],
                            "ViewerCertificate": {
                                "CloudFrontDefaultCertificate": true
                            },
                            "PriceClass": "PriceClass_100",
                            "DefaultCacheBehavior": {
                                "AllowedMethods": [
                                    "GET",
                                    "HEAD"
                                ],
                                "CachedMethods": [
                                    "GET",
                                    "HEAD"
                                ],
                                "TargetOriginId": "origin1",
                                "ViewerProtocolPolicy": "redirect-to-https",
                                "ForwardedValues": {
                                    "QueryString": false,
                                    "Cookies": { "Forward": "none" }
                                },
                                "Compress": false
                            },
                            "Enabled": true,
                            "IPV6Enabled": true,
                            "HttpVersion": "http2"
                        }
                    }
                }
            }
        });
        test.done();
    },
    'distribution with resolvable lambda-association'(test) {
        const stack = new cdk.Stack();
        const sourceBucket = new s3.Bucket(stack, 'Bucket');
        const lambdaFunction = new lambda.SingletonFunction(stack, 'Lambda', {
            uuid: 'xxxx-xxxx-xxxx-xxxx',
            code: lambda.Code.inline('foo'),
            handler: 'index.handler',
            runtime: lambda.Runtime.NODEJS_8_10
        });
        new lib_1.CloudFrontWebDistribution(stack, 'AnAmazingWebsiteProbably', {
            originConfigs: [
                {
                    s3OriginSource: {
                        s3BucketSource: sourceBucket
                    },
                    behaviors: [
                        {
                            isDefaultBehavior: true,
                            lambdaFunctionAssociations: [{
                                    eventType: lib_1.LambdaEdgeEventType.ORIGIN_REQUEST,
                                    lambdaFunction: lambdaFunction.latestVersion
                                }]
                        }
                    ]
                }
            ]
        });
        assert_1.expect(stack).to(assert_1.haveResourceLike('AWS::CloudFront::Distribution', {
            "DistributionConfig": {
                "DefaultCacheBehavior": {
                    "LambdaFunctionAssociations": [
                        {
                            "EventType": "origin-request",
                            "LambdaFunctionARN": {
                                "Fn::Join": [
                                    "",
                                    [
                                        { "Fn::GetAtt": ["SingletonLambdaxxxxxxxxxxxxxxxx69D4268A", "Arn"] },
                                        ":$LATEST"
                                    ]
                                ]
                            }
                        }
                    ],
                },
            }
        }));
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,